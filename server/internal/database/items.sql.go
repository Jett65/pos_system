// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: items.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createItem = `-- name: CreateItem :one
INSERT INTO items (id, name, price, number_of, description)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, price, number_of, description, location
`

type CreateItemParams struct {
	ID          uuid.UUID
	Name        string
	Price       string
	NumberOf    int32
	Description string
}

func (q *Queries) CreateItem(ctx context.Context, arg CreateItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, createItem,
		arg.ID,
		arg.Name,
		arg.Price,
		arg.NumberOf,
		arg.Description,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.NumberOf,
		&i.Description,
		&i.Location,
	)
	return i, err
}

const deleteItem = `-- name: DeleteItem :exec
DELETE FROM items
WHERE id=$1
`

func (q *Queries) DeleteItem(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteItem, id)
	return err
}

const getItem = `-- name: GetItem :one
SELECT id, name, price, number_of, description, location FROM items WHERE id=$1
`

func (q *Queries) GetItem(ctx context.Context, id uuid.UUID) (Item, error) {
	row := q.db.QueryRowContext(ctx, getItem, id)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.NumberOf,
		&i.Description,
		&i.Location,
	)
	return i, err
}

const getItemByName = `-- name: GetItemByName :many
SELECT id, name, price, number_of, description, location from items WHERE name=$1
`

func (q *Queries) GetItemByName(ctx context.Context, name string) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, getItemByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.NumberOf,
			&i.Description,
			&i.Location,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getItems = `-- name: GetItems :many
SELECT id, name, price, number_of, description, location FROM items
`

func (q *Queries) GetItems(ctx context.Context) ([]Item, error) {
	rows, err := q.db.QueryContext(ctx, getItems)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Item
	for rows.Next() {
		var i Item
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.NumberOf,
			&i.Description,
			&i.Location,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateItem = `-- name: UpdateItem :one
UPDATE items SET name=$2, price=$3, number_of=$4, description=$5
WHERE id=$1
RETURNING id, name, price, number_of, description, location
`

type UpdateItemParams struct {
	ID          uuid.UUID
	Name        string
	Price       string
	NumberOf    int32
	Description string
}

func (q *Queries) UpdateItem(ctx context.Context, arg UpdateItemParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, updateItem,
		arg.ID,
		arg.Name,
		arg.Price,
		arg.NumberOf,
		arg.Description,
	)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.NumberOf,
		&i.Description,
		&i.Location,
	)
	return i, err
}

const updateNumberOf = `-- name: UpdateNumberOf :one
UPDATE items SET number_of=$2
WHERE id=$1
RETURNING id, name, price, number_of, description, location
`

type UpdateNumberOfParams struct {
	ID       uuid.UUID
	NumberOf int32
}

func (q *Queries) UpdateNumberOf(ctx context.Context, arg UpdateNumberOfParams) (Item, error) {
	row := q.db.QueryRowContext(ctx, updateNumberOf, arg.ID, arg.NumberOf)
	var i Item
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Price,
		&i.NumberOf,
		&i.Description,
		&i.Location,
	)
	return i, err
}
